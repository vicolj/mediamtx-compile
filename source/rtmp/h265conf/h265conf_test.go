package h265conf

import (
	"reflect"
	"testing"
)

func TestMarshalUnmarshal(t *testing.T) {
	vps := []byte{0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x5d, 0xac, 0x09}
	sps := []byte{0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x5d, 0xa0, 0x01, 0xe0, 0x20, 0x02, 0x1c, 0x59, 0x4b, 0x92, 0x42, 0x96, 0x11, 0x80, 0xb5, 0x01, 0x01, 0x01, 0x28, 0x08}
	pps := []byte{0x44, 0x01, 0xc0, 0x25, 0x2f, 0x05, 0x32, 0x40}

	conf := Conf{
		VPS: vps,
		SPS: sps,
		PPS: pps,
	}

	buf, err := conf.Marshal()
	if err != nil {
		t.Fatal(err)
	}

	var conf2 Conf
	err = conf2.Unmarshal(buf)
	if err != nil {
		t.Fatal(err)
	}

	if !reflect.DeepEqual(conf.VPS, conf2.VPS) {
		t.Fatal("VPS does not match")
	}

	if !reflect.DeepEqual(conf.SPS, conf2.SPS) {
		t.Fatal("SPS does not match")
	}

	if !reflect.DeepEqual(conf.PPS, conf2.PPS) {
		t.Fatal("PPS does not match")
	}
}

func TestUnmarshalError(t *testing.T) {
	for name, byts := range map[string][]byte{
		"empty":            {},
		"short":            {0x01, 0x02},
		"invalid":          make([]byte, 25),
		"incomplete array": {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x01},
	} {
		t.Run(name, func(t *testing.T) {
			var conf Conf
			err := conf.Unmarshal(byts)
			if err == nil {
				t.Fatal("expected error")
			}
		})
	}
}